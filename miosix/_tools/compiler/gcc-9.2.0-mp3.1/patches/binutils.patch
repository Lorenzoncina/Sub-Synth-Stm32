diff -ruN binutils-2.32-old/bfd/elf32-arm.c binutils-2.32/bfd/elf32-arm.c
--- binutils-2.32-old/bfd/elf32-arm.c	2019-01-28 18:09:04.000000000 +0100
+++ binutils-2.32/bfd/elf32-arm.c	2020-07-19 15:10:11.522594490 +0200
@@ -1853,6 +1853,24 @@
 	 FALSE),		/* pcrel_offset */
 };
 
+static reloc_howto_type elf32_arm_howto_table_miosix[1] =
+{
+/* 32 bit absolute */
+  HOWTO (R_ARM_MIOSIXPROC_TGT2,		/* type */
+	 0,			/* rightshift */
+	 2,			/* size (0 = byte, 1 = short, 2 = long) */
+	 32,			/* bitsize */
+	 FALSE,			/* pc_relative */
+	 0,			/* bitpos */
+	 complain_overflow_bitfield,/* complain_on_overflow */
+	 bfd_elf_generic_reloc,	/* special_function */
+	 "R_ARM_MIOSIXPROC_TGT2",		/* name */
+	 FALSE,			/* partial_inplace */
+	 0xffffffff,		/* src_mask */
+	 0xffffffff,		/* dst_mask */
+	 FALSE),		/* pcrel_offset */
+};
+
 /* 249-255 extended, currently unused, relocations:  */
 static reloc_howto_type elf32_arm_howto_table_3[4] =
 {
@@ -1922,6 +1940,10 @@
   if (r_type >= R_ARM_IRELATIVE
       && r_type < R_ARM_IRELATIVE + ARRAY_SIZE (elf32_arm_howto_table_2))
     return &elf32_arm_howto_table_2[r_type - R_ARM_IRELATIVE];
+  
+  if (r_type >= R_ARM_MIOSIXPROC_TGT2
+      && r_type < R_ARM_MIOSIXPROC_TGT2 + ARRAY_SIZE (elf32_arm_howto_table_miosix))
+    return &elf32_arm_howto_table_miosix[r_type - R_ARM_MIOSIXPROC_TGT2];
 
   if (r_type >= R_ARM_RREL32
       && r_type < R_ARM_RREL32 + ARRAY_SIZE (elf32_arm_howto_table_3))
@@ -8995,6 +9017,8 @@
     globals->target2_reloc = R_ARM_ABS32;
   else if (strcmp (params->target2_type, "got-rel") == 0)
     globals->target2_reloc = R_ARM_GOT_PREL;
+  else if (strcmp (params->target2_type, "mx-data-rel") == 0) //Miosix OS specific
+    globals->target2_reloc = R_ARM_MIOSIXPROC_TGT2;
   else
     {
       _bfd_error_handler (_("invalid TARGET2 relocation type '%s'"),
@@ -10431,6 +10455,7 @@
     case R_ARM_XPC25:
     case R_ARM_PREL31:
     case R_ARM_PLT32:
+    case R_ARM_MIOSIXPROC_TGT2:
       /* Handle relocations which should use the PLT entry.  ABS32/REL32
 	 will use the symbol's value, which may point to a PLT entry, but we
 	 don't need to handle that here.  If we created a PLT entry, all
@@ -10480,7 +10505,8 @@
 	  && r_type != R_ARM_CALL
 	  && r_type != R_ARM_JUMP24
 	  && r_type != R_ARM_PREL31
-	  && r_type != R_ARM_PLT32)
+	  && r_type != R_ARM_PLT32
+	  && r_type != R_ARM_MIOSIXPROC_TGT2) /* No run-time resolution needed */
 	{
 	  Elf_Internal_Rela outrel;
 	  bfd_boolean skip, relocate;
@@ -10793,6 +10819,33 @@
 	  if (branch_type == ST_BRANCH_TO_THUMB)
 	    value |= 1;
 	  break;
+
+	/*
+	 * R_ARM_MIOSIXPROC_TGT2 is used in Miosix processes to implement TARGET2
+	 * static relocations for C++ exception unwinding tables.
+	 * In Miosix processes, pointers in exception unwinding tables are of the
+	 * DW_EH_PE_datarel type as there's no fixed gap between .ARM.extab and
+	 * .data sections. The unwinding code sums the base of the data segment to
+	 * the statically relocated offset by calling _Unwind_GetDataRelBase.
+	 * Since this is done in code, no run-time relocation should be output in
+	 * the binary file against .ARM.extab which can be readonly.
+	 * Apparently, all the required support was unimplemented in GCC and
+	 * although binutils provided a command-line option to select how TARGET2
+	 * relocations should be treated, the available ones couldn't be made to
+	 * work. Even more, although I tried to implement TARGET2 using an existing
+	 * relocations, I couldn't and I had to add a new one, R_ARM_MIOSIXPROC_TGT2
+	 * which is basically the same as R_ARM_ABS32, except that
+	 * - no run-time relocation should be present
+	 * - 0x4000000 (Miosix processes' DATA_BASE in the linker script) should be
+	 *   subtracted to encode only the data-relative offset
+	 *
+	 * See processes-patch.md in the Miosix kernel tree for the big picture.
+	 */
+	case R_ARM_MIOSIXPROC_TGT2:
+	  value += addend - 0x40000000; /* subtract DATA_BASE */
+	  if (branch_type == ST_BRANCH_TO_THUMB)
+	    value |= 1;
+	  break;
 
 	case R_ARM_ABS32_NOI:
 	  value += addend;
diff -ruN binutils-2.32-old/include/elf/arm.h binutils-2.32/include/elf/arm.h
--- binutils-2.32-old/include/elf/arm.h	2019-01-19 17:01:33.000000000 +0100
+++ binutils-2.32/include/elf/arm.h	2020-07-19 11:39:39.783870092 +0200
@@ -250,6 +250,8 @@
   RELOC_NUMBER (R_ARM_TLS_LDM32_FDPIC,  166)
   RELOC_NUMBER (R_ARM_TLS_IE32_FDPIC,   167)
 
+  RELOC_NUMBER (R_ARM_MIOSIXPROC_TGT2,  248)   /* data-relative TARGET2 in Miosix processes */
+  
   /* Extensions?  R=read-only?  */
   RELOC_NUMBER (R_ARM_RXPC25,         	249)
   RELOC_NUMBER (R_ARM_RSBREL32,       	250)
